buildscript {
    ext {
        kotlin_version = '1.2.61'
        junit_version = '4.12'
        slf4j_version = '1.7.25'
        logback_version = '1.2.3'

        bintray_plugin_version = '1.8.4'
    }
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
    }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

group 'net.oddpoet'
version '1.3.0-SNAPSHOT'
description 'rspec style assertion library for kotlin test'

sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenCentral()
}

dependencies {
    compile(
            "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version",
            "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",
            "org.slf4j:slf4j-api:$slf4j_version"
    )

    testCompile(
            "org.jetbrains.kotlin:kotlin-test:$kotlin_version",
            "junit:junit:$junit_version",
            "ch.qos.logback:logback-classic:$logback_version"
    )
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.6"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.6"
}


def prop(name, defaultValue) {
    return project.hasProperty(name) ? project.property(name) : defaultValue
}

bintray {
    user = prop('bintray.user', 'WHORU')
    key = prop("bintray.key", "NO-BINTRAY-KEY")
    pkg {
        repo = 'maven'
        name = project.name
        licenses = ['Apache-2.0']
        websiteUrl = 'https://github.com/odd-poet/kotlin-expect'
        issueTrackerUrl = 'https://github.com/odd-poet/kotlin-expect/issues'
        vcsUrl = 'https://github.com/odd-poet/kotlin-expect.git'
        labels = ['kotlin', 'expect', 'rspec']
        publicDownloadNumbers = true
        version {
            name = project.version
            desc = project.description
            released = new Date()
            vcsTag = "v${project.version}"
            gpg {
                sign = true
                passphrase = prop('gpg.passphrase', 'you know nothing, jon snow')
                // passphrase = 'you know nothing, jon snow'
            }
            mavenCentralSync {
                sync = true //[Default: true] Determines whether to sync the version to Maven Central.
                user = prop("oss.user.token", "WHO-ARE-YOU")
                password = prop("oss.user.password", "NO-PASSWORD")
                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
    publications = ['MyPublication']
    dryRun = false
    publish = true
    override = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            id "oddpoet"
            name "Yunsang Choi"
            email "oddpoet@gmail.net"
        }
    }
    scm {
        url "https://github.com/odd-poet/kotlin-expect"
    }
}
publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.version
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('description', project.description)
                root.appendNode('name', project.name)
                root.appendNode('url', 'https://github.com/odd-poet/kotlin-expect')
                root.children().last() + pomConfig
            }

        }
    }

}


apply plugin: 'jacoco'
jacoco {
    toolVersion = "0.7.9"
}
jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }
}
